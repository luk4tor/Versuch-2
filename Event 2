1. Neue EventRect-Klasse

public class EventRect extends Rectangle {
    int eventRectDefaultX, eventRectDefaultY;
    boolean eventDone = false; // Für einmalige Events

    public EventRect(int x, int y, int width, int height) {
        super(x, y, width, height);
        this.eventRectDefaultX = x;
        this.eventRectDefaultY = y;
    }
}


2. EventRect-Array im EventHandler

public class EventHandler {
    GamePanel gp;
    EventRect[][][] eventRect; // [map][col][row]

    // Für Anti-Repeat-Mechanik
    int previousEventX, previousEventY;
    boolean canTouchEvent = true;

    public EventHandler(GamePanel gp) {
        this.gp = gp;
        // Beispiel für ein Map mit 50x50 Tiles
        eventRect = new EventRect[gp.maxMap][gp.maxWorldCol][gp.maxWorldRow];

        for (int map = 0; map < gp.maxMap; map++) {
            for (int col = 0; col < gp.maxWorldCol; col++) {
                for (int row = 0; row < gp.maxWorldRow; row++) {
                    eventRect[map][col][row] = new EventRect(23, 23, 2, 2);
                }
            }
        }
    }


3. Überarbeitete checkEvent()-Methode

    public void checkEvent() {
        // Abstand berechnen, um Wiederholung zu verhindern
        int xDistance = Math.abs(gp.player.worldX - previousEventX);
        int yDistance = Math.abs(gp.player.worldY - previousEventY);
        int distance = Math.max(xDistance, yDistance);

        if (distance > gp.tileSize) {
            canTouchEvent = true;
        }

        // Beispiel: Einmalige Grube (Pit) bei [27][16]
        if (hit(0, 27, 16, "any") && !eventRect[0][27][16].eventDone) {
            damagePit(0, 27, 16, gp.dialogueState);
        }

        // Beispiel: Wiederholbare Grube, aber kein mehrfaches Auslösen
        if (hit(0, 13, 19, "any")) {
            damagePit(0, 13, 19, gp.dialogueState);
        }
    }


4. Überarbeitete hit()-Methode

    public boolean hit(int map, int col, int row, String reqDirection) {
        boolean hit = false;

        // Spieler-Kollisionsbereich auf Weltkoordinaten setzen
        gp.player.solidArea.x = gp.player.worldX + gp.player.solidArea.x;
        gp.player.solidArea.y = gp.player.worldY + gp.player.solidArea.y;

        // EventRect auf Weltkoordinaten setzen
        eventRect[map][col][row].x = col * gp.tileSize + eventRect[map][col][row].eventRectDefaultX;
        eventRect[map][col][row].y = row * gp.tileSize + eventRect[map][col][row].eventRectDefaultY;

        if (gp.player.solidArea.intersects(eventRect[map][col][row]) && canTouchEvent) {
            if (gp.player.direction.equals(reqDirection) || reqDirection.equals("any")) {
                hit = true;

                // Nach Event: Spielerposition merken und Sperre setzen
                previousEventX = gp.player.worldX;
                previousEventY = gp.player.worldY;
                canTouchEvent = false;
            }
        }

        // Bereiche zurücksetzen
        gp.player.solidArea.x = gp.player.solidAreaDefaultX;
        gp.player.solidArea.y = gp.player.solidAreaDefaultY;
        eventRect[map][col][row].x = eventRect[map][col][row].eventRectDefaultX;
        eventRect[map][col][row].y = eventRect[map][col][row].eventRectDefaultY;

        return hit;
    }


5. Beispiel für ein einmaliges Event (Grube)

    public void damagePit(int map, int col, int row, int gameState) {
        gp.gameState = gameState;
        gp.ui.currentDialogue = "You fell into a pit!";
        gp.player.life -= 1;
        eventRect[map][col][row].eventDone = true; // Event als erledigt markieren
    }
